# Auto-generated by EclipseNSIS Script Wizard
# John Gitau
# Jan 22, 2013 11:43:48 AM

Name "STDM v1.0 Schema Restore"

RequestExecutionLevel admin

# General Symbol Definitions
!define VERSION "1.0 RC"
!define COMPANY "Global Land Tool Network"
!define URL www.stdm.gltn.net

# MUI Symbol Definitions
!define MUI_ICON stdm.ico
!define MUI_FINISHPAGE_NOAUTOCLOSE
!define MUI_UNICON stdm.ico
!define MUI_UNFINISHPAGE_NOAUTOCLOSE

# Included files
!include Sections.nsh
!include MUI2.nsh
!include LogicLib.nsh
!include nsDialogs.nsh

# Reserved Files
!insertmacro MUI_RESERVEFILE_LANGDLL

# Installer pages
!insertmacro MUI_PAGE_WELCOME
; Custom database connection page
Page custom stdmConnPage stdmConnPageLeave
!insertmacro MUI_PAGE_INSTFILES

# Installer languages
!insertmacro MUI_LANGUAGE English

# Installer attributes
OutFile "STDM-v1-Restore-Schema.exe"
CRCCheck on
XPStyle on
ShowInstDetails show
VIProductVersion 0.1.0.0
VIAddVersionKey /LANG=${LANG_ENGLISH} ProductName "STDM Restore Schema"
VIAddVersionKey /LANG=${LANG_ENGLISH} ProductVersion "${VERSION}"
VIAddVersionKey /LANG=${LANG_ENGLISH} CompanyName "${COMPANY}"
VIAddVersionKey /LANG=${LANG_ENGLISH} FileVersion "${VERSION}"
VIAddVersionKey /LANG=${LANG_ENGLISH} FileDescription "STDM 1.0 Release Copy"
VIAddVersionKey /LANG=${LANG_ENGLISH} LegalCopyright ""
ShowUninstDetails show

; Place all temporary files used by the installer in their own subdirectory under $TEMP (makes the files easier to find)
!define TEMPDIR "$PLUGINSDIR\stdm_db_installer"

;Define the version of PostgreSQL that we are going to use
!define POSTGRESQL_9.2 1

;Change GUID for different platforms i.e x86 and x86_64
!ifdef POSTGRESQL_9.2
	!define PG_VERSION "9.2"
	!define PG_VERSION_DISPLAY "PostgreSQL 9.2"
	!define PG_GUID "postgresql-9.2" 
    !define POSTGIS_PG_VERSION "pg92"
!endif

!define POSTGIS_VERSION "2.1"

#Custom db connection UI controls
Var Dialog
Var userNameLbl
Var userNameTxt
Var groupConn
Var passLbl
Var passTxt
Var portLbl
var portTxt
#Database Connection Info
Var userName
Var pass
Var port
var dbName

# Installer functions
Function .onInit
    InitPluginsDir 
    StrCpy $userName "postgres"   
    StrCpy $pass ""
    StrCpy $port "5432"
    StrCpy $dbName "stdm"
FunctionEnd

; Init functions for the database connection page
Function stdmConnPage
    nsDialogs::Create 1018
    Pop $Dialog

    ${If} $Dialog == error
        Abort
    ${EndIf}
    
    !insertmacro MUI_HEADER_TEXT "PostgreSQL Database Connection" "Please specify the database connection properties for restoring the STDM Schema."
    
    ${NSD_CreateGroupBox} 0 0 -1 -5 "Database Connection Information:"
    Pop $groupConn
    
    ${NSD_CreateLabel} 45 38 60 20 "User Name:"
    Pop $userNameLbl

    ${NSD_CreateText} 107 38 70% 20 $userName
    Pop $userNameTxt
    EnableWindow $userNameTxt 0
    
    ${NSD_CreateLabel} 45 68 60 20 "Password:"
    Pop $passLbl

    ${NSD_CreatePassword} 107 68 70% 20 $pass
    Pop $passTxt
    
    ${NSD_CreateLabel} 45 98 60 20 "Port:"
    Pop $portLbl

    ${NSD_CreateText} 107 98 70% 20 $port
    Pop $portTxt
    
    nsDialogs::Show
    
FunctionEnd

#Save control state, 
#TODO does not work for back button
Function stdmConnPageLeave

    ${NSD_GetText} $userNameTxt $userName
    ${NSD_GetText} $passTxt $pass
    ${NSD_GetText} $portTxt $port

FunctionEnd

; Validate the PostgreSQL installation
Function CheckPostgresql
    #Get the installation directory
	#SetRegView 64
    ReadRegStr $0 HKLM "Software\PostgreSQL\Installations\${PG_GUID}" "Base Directory"
    ${if} $0 == ""
        DetailPrint "The installer could not find a PostgreSQL installation,"
        DetailPrint "A valid PostgreSQL installation is required," 
        DetailPrint "Error: The STDM schema will not be created."  
       Abort
    ${Else}
        StrCpy $1 "$0\bin\psql.exe"
        IfFileExists $1 pg_restore_available
        MessageBox MB_OK|MB_ICONSTOP "PostgreSQL terminal not found."
        Abort "Error: PostgreSQL terminal not found." 
    ${EndIf}
    
    pg_restore_available:
        Call RestoreSTDMSchema

FunctionEnd

#Restores the STDM schema from SQL file 
Function RestoreSTDMSchema
    ; Create batch file for execution - restore_stdm.bat
    FileOpen $4 "${TEMPDIR}\restore_stdm.bat" "w"
    FileWrite $4 "SET PGPASSWORD=$pass$\r$\n"
    FileWrite $4 "SET PGPORT=$port$\r$\n"
    FileWrite $4 '"$0\bin\psql.exe" -U $userName -d $dbName -h localhost -f ${TEMPDIR}\stdmConfig.sql 2> "${TEMPDIR}\restore_stdm_schema_error.txt"$\r$\n'
    FileWrite $4 "exit %ERRORLEVEL%$\r$\n"
    FileClose $4
    
    DetailPrint "Restoring STDM schema..."
    ExecDos::exec '"$SYSDIR\cmd.exe" /c "${TEMPDIR}\restore_stdm.bat"'
    Pop $5
    DetailPrint "STDM schema has been successfully created!"
    
    ; If psql returned non-zero then an error occurred
    IntCmp $5 0 restore_db_success
    
    ; Creation ya database imefail. Provide feedback to user
    StrCpy $7 "STDM schema restore failed."
    StrCpy $8 "${TEMPDIR}\restore_stdm_schema_error.txt"
    Call AbortDisplayLogOption
    
    restore_db_success:
        return
		
FunctionEnd

#A generic function that gives the user the option to display an error log and abort the installation.
; $7 - Error Message
; $8 - Log File Name
Function AbortDisplayLogOption
    ; Display a message box with the error
    MessageBox MB_YESNO|MB_ICONSTOP "$7$\r$\n$\r$\nWould you like to view the error log '$8'?" /SD IDNO IDYES adlo_show_error_log
    
    DetailPrint $7
    Abort 
    Return 
    
    adlo_show_error_log:
        ExecShell "open" "$8"
        DetailPrint $7
        Abort 
        Return
    
FunctionEnd

#Main installation section
Section Main    
    
    #We just require the installer to restore the database so we will not be saving any files in the program files directory
    SetOutPath ${TEMPDIR}
    
    #Send SQL file to TEMP directory
    File stdmConfig.sql    
    
    #Call the function for creating a template database then restore the stdm database in the template
    call CheckPostgresql
    
SectionEnd





